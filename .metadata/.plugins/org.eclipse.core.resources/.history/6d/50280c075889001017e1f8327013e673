package springdi_xml.main;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;

import springdi_xml.bean.TV;

public class TVMain {

	private ApplicationContext context;
	
	public TVMain() {
		this.context = new GenericXmlApplicationContext("springdi_xml/conf/applicationContext.xml");
	}
	
	public static void main(String[] args) {
		
		TVMain tvMain = new TVMain();
		
		TV tv_constuctor = (TV)tvMain.context.getBean("tv_constuctor");
		System.out.println(tv_constuctor);
		
		TV tv_constuctor2 = (TV)tvMain.context.getBean("tv_constuctor");
		System.out.println(tv_constuctor2);
		
		// 스프링은 별도의 scope 설정을 하지 않으면 모든 빈을 싱글턴으로 생성함
		// speaker, tv_constuctor 빈은 싱글턴 (scope="singleton")
		System.out.println(tv_constuctor.equals(tv_constuctor2));
		System.out.println(tv_constuctor.hashCode()==tv_constuctor2.hashCode());
		System.out.println(tv_constuctor.getSpeaker().equals(tv_constuctor2.getSpeaker()));
		System.out.println(tv_constuctor.getSpeaker().hashCode()==tv_constuctor2.getSpeaker().hashCode());
		
		TV tv_setter = (TV)tvMain.context.getBean("tv_setter");
		System.out.println(tv_setter);

		TV tv_setter2 = (TV)tvMain.context.getBean("tv_setter");
		System.out.println(tv_setter2);
		
		// scope이 prototype으로 설정되어 있으므로 매번 새로운 빈을 생성함
		System.out.println(tv_setter.equals(tv_setter2));
		System.out.println(tv_setter.hashCode()==tv_setter2.hashCode());
		System.out.println(tv_setter.getSpeaker().equals(tv_setter2.getSpeaker()));
		System.out.println(tv_setter.getSpeaker().hashCode()==tv_setter2.getSpeaker().hashCode());
		
		System.out.println(tv_setter.getName());
		
	} // main
	
} // class

























